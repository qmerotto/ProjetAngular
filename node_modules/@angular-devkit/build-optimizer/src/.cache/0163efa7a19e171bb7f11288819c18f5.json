{"remainingRequest":"C:\\L3M\\L3M-Projet\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\L3M\\L3M-Projet\\node_modules\\rxjs\\operator\\skipWhile.js","dependencies":[{"path":"C:\\L3M\\L3M-Projet\\node_modules\\rxjs\\operator\\skipWhile.js","mtime":1526460754252},{"path":"C:\\L3M\\L3M-Projet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1526460539075},{"path":"C:\\L3M\\L3M-Projet\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1526460567500}],"contextDependencies":[],"result":["\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map",null]}