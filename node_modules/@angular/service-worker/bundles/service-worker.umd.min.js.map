{"version":3,"sources":["packages/service-worker/service-worker.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","serviceWorker","common","core","rxjs","operators","this","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","ERR_SW_NOT_SUPPORTED","NgswCommChannel","platformId","isPlatformBrowser","controllerChanges","fromEvent","pipe","map","controller","currentController","defer","of","controllerWithChanges","concat","worker","filter","c","registration","switchMap","getRegistration","events","event","data","publish","connect","undefined","errorObservable","message","throwError","Error","postMessage","action","payload","take","tap","sw","toPromise","then","postMessageWithStatus","type","nonce","waitForStatus","Promise","all","generateNonce","Math","round","random","eventsOfType","nextEventOfType","status","defineProperty","get","enumerable","configurable","ctorParameters","decorators","Inject","args","PLATFORM_ID","SwPush","subscriptionChanges","Subject","isEnabled","messages","NEVER","subscription","pushManager","workerDrivenSubscriptions","pm","getSubscription","sub","merge","requestSubscription","options","_this","reject","pushOptions","userVisibleOnly","key","atob","serverPublicKey","replace","applicationServerKey","Uint8Array","ArrayBuffer","charCodeAt","subscribe","next","unsubscribe","success","Injectable","SwUpdate","available","activated","checkForUpdate","statusNonce","activateUpdate","RegistrationOptions","SCRIPT","InjectionToken","ngswAppInitializer","injector","script","app","ApplicationRef","navigator","enabled","whenStable","isStable","stable","addEventListener","register","scope","ngswCommChannelFactory","opts","ServiceWorkerModule","ngModule","providers","provide","useValue","useFactory","deps","APP_INITIALIZER","Injector","multi","NgModule","ɵangular_packages_service_worker_service_worker_e","ɵangular_packages_service_worker_service_worker_a","ɵangular_packages_service_worker_service_worker_b","ɵangular_packages_service_worker_service_worker_c","ɵangular_packages_service_worker_service_worker_d","value"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.2\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs/operators'), require('rxjs')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/service-worker', ['exports', '@angular/common', '@angular/core', 'rxjs/operators', 'rxjs'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.serviceWorker = {}),global.ng.common,global.ng.core,global.rxjs.operators,global.rxjs));\n}(this, (function (exports,common,core,operators,rxjs) { 'use strict';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';\nfunction errorObservable(message) {\n    return rxjs.defer(function () { return rxjs.throwError(new Error(message)); });\n}\n/**\n * @experimental\n*/\nvar NgswCommChannel = /** @class */ (function () {\n    function NgswCommChannel(serviceWorker, platformId) {\n        this.serviceWorker = serviceWorker;\n        if (!serviceWorker || !common.isPlatformBrowser(platformId)) {\n            this.serviceWorker = undefined;\n            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);\n        }\n        else {\n            var controllerChangeEvents = (rxjs.fromEvent(serviceWorker, 'controllerchange'));\n            var controllerChanges = (controllerChangeEvents.pipe(operators.map(function () { return serviceWorker.controller; })));\n            var currentController = (rxjs.defer(function () { return rxjs.of(serviceWorker.controller); }));\n            var controllerWithChanges = (rxjs.concat(currentController, controllerChanges));\n            this.worker = (controllerWithChanges.pipe(operators.filter(function (c) { return !!c; })));\n            this.registration = (this.worker.pipe(operators.switchMap(function () { return serviceWorker.getRegistration(); })));\n            var rawEvents = rxjs.fromEvent(serviceWorker, 'message');\n            var rawEventPayload = rawEvents.pipe(operators.map(function (event) { return event.data; }));\n            var eventsUnconnected = (rawEventPayload.pipe(operators.filter(function (event) { return !!event && !!event['type']; })));\n            var events = eventsUnconnected.pipe(operators.publish());\n            this.events = events;\n            events.connect();\n        }\n    }\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.postMessage = /**\n       * @internal\n       */\n    function (action, payload) {\n        return this.worker\n            .pipe(operators.take(1), operators.tap(function (sw) {\n            sw.postMessage(__assign({ action: action }, payload));\n        }))\n            .toPromise()\n            .then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.postMessageWithStatus = /**\n       * @internal\n       */\n    function (type, payload, nonce) {\n        var waitForStatus = this.waitForStatus(nonce);\n        var postMessage = this.postMessage(type, payload);\n        return Promise.all([waitForStatus, postMessage]).then(function () { return undefined; });\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.generateNonce = /**\n       * @internal\n       */\n    function () { return Math.round(Math.random() * 10000000); };\n    /**\n     * @internal\n     */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    NgswCommChannel.prototype.eventsOfType = /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    function (type) {\n        return this.events.pipe(operators.filter(function (event) { return event.type === type; }));\n    };\n    /**\n     * @internal\n     */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    NgswCommChannel.prototype.nextEventOfType = /**\n       * @internal\n       */\n    // TODO(i): the typings and casts in this method are wonky, we should revisit it and make the\n    // types flow correctly\n    function (type) {\n        return (this.eventsOfType(type).pipe(operators.take(1)));\n    };\n    /**\n     * @internal\n     */\n    /**\n       * @internal\n       */\n    NgswCommChannel.prototype.waitForStatus = /**\n       * @internal\n       */\n    function (nonce) {\n        return this.eventsOfType('STATUS')\n            .pipe(operators.filter(function (event) { return event.nonce === nonce; }), operators.take(1), operators.map(function (event) {\n            if (event.status) {\n                return undefined;\n            }\n            throw new Error((event.error));\n        }))\n            .toPromise();\n    };\n    Object.defineProperty(NgswCommChannel.prototype, \"isEnabled\", {\n        get: function () { return !!this.serviceWorker; },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */\n    NgswCommChannel.ctorParameters = function () { return [\n        null,\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    return NgswCommChannel;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe and listen to push notifications from the Service Worker.\n *\n * @experimental\n */\nvar SwPush = /** @class */ (function () {\n    function SwPush(sw) {\n        this.sw = sw;\n        this.subscriptionChanges = new rxjs.Subject();\n        if (!sw.isEnabled) {\n            this.messages = rxjs.NEVER;\n            this.subscription = rxjs.NEVER;\n            return;\n        }\n        this.messages = this.sw.eventsOfType('PUSH').pipe(operators.map(function (message) { return message.data; }));\n        this.pushManager = this.sw.registration.pipe(operators.map(function (registration) { return registration.pushManager; }));\n        var workerDrivenSubscriptions = this.pushManager.pipe(operators.switchMap(function (pm) { return pm.getSubscription().then(function (sub) { return sub; }); }));\n        this.subscription = rxjs.merge(workerDrivenSubscriptions, this.subscriptionChanges);\n    }\n    Object.defineProperty(SwPush.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n           * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n           * ServiceWorkerModule).\n           */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    SwPush.prototype.requestSubscription = function (options) {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var pushOptions = { userVisibleOnly: true };\n        var key = atob(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));\n        var applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));\n        for (var i = 0; i < key.length; i++) {\n            applicationServerKey[i] = key.charCodeAt(i);\n        }\n        pushOptions.applicationServerKey = applicationServerKey;\n        return this.pushManager.pipe(operators.switchMap(function (pm) { return pm.subscribe(pushOptions); }), operators.take(1))\n            .toPromise()\n            .then(function (sub) {\n            _this.subscriptionChanges.next(sub);\n            return sub;\n        });\n    };\n    SwPush.prototype.unsubscribe = function () {\n        var _this = this;\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var unsubscribe = this.subscription.pipe(operators.switchMap(function (sub) {\n            if (sub !== null) {\n                return sub.unsubscribe().then(function (success) {\n                    if (success) {\n                        _this.subscriptionChanges.next(null);\n                        return undefined;\n                    }\n                    else {\n                        throw new Error('Unsubscribe failed!');\n                    }\n                });\n            }\n            else {\n                throw new Error('Not subscribed to push notifications.');\n            }\n        }));\n        return unsubscribe.pipe(operators.take(1)).toPromise();\n    };\n    SwPush.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    SwPush.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwPush;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Subscribe to update notifications from the Service Worker, trigger update\n * checks, and forcibly activate updates.\n *\n * @experimental\n */\nvar SwUpdate = /** @class */ (function () {\n    function SwUpdate(sw) {\n        this.sw = sw;\n        if (!sw.isEnabled) {\n            this.available = rxjs.NEVER;\n            this.activated = rxjs.NEVER;\n            return;\n        }\n        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');\n        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');\n    }\n    Object.defineProperty(SwUpdate.prototype, \"isEnabled\", {\n        /**\n         * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n         * ServiceWorkerModule).\n         */\n        get: /**\n           * Returns true if the Service Worker is enabled (supported by the browser and enabled via\n           * ServiceWorkerModule).\n           */\n        function () { return this.sw.isEnabled; },\n        enumerable: true,\n        configurable: true\n    });\n    SwUpdate.prototype.checkForUpdate = function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.prototype.activateUpdate = function () {\n        if (!this.sw.isEnabled) {\n            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));\n        }\n        var statusNonce = this.sw.generateNonce();\n        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce: statusNonce }, statusNonce);\n    };\n    SwUpdate.decorators = [\n        { type: core.Injectable }\n    ];\n    /** @nocollapse */\n    SwUpdate.ctorParameters = function () { return [\n        { type: NgswCommChannel, },\n    ]; };\n    return SwUpdate;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar RegistrationOptions = /** @class */ (function () {\n    function RegistrationOptions() {\n    }\n    return RegistrationOptions;\n}());\nvar SCRIPT = new core.InjectionToken('NGSW_REGISTER_SCRIPT');\nfunction ngswAppInitializer(injector, script, options, platformId) {\n    var initializer = function () {\n        var app = injector.get(core.ApplicationRef);\n        if (!(common.isPlatformBrowser(platformId) && ('serviceWorker' in navigator) &&\n            options.enabled !== false)) {\n            return;\n        }\n        var whenStable = app.isStable.pipe(operators.filter(function (stable) { return !!stable; }), operators.take(1)).toPromise();\n        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW\n        // becomes active. This allows the SW to initialize itself even if there is no application\n        // traffic.\n        navigator.serviceWorker.addEventListener('controllerchange', function () {\n            if (navigator.serviceWorker.controller !== null) {\n                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });\n            }\n        });\n        // Don't return the Promise, as that will block the application until the SW is registered, and\n        // cause a crash if the SW registration fails.\n        whenStable.then(function () { return navigator.serviceWorker.register(script, { scope: options.scope }); });\n    };\n    return initializer;\n}\nfunction ngswCommChannelFactory(opts, platformId) {\n    return new NgswCommChannel(opts.enabled !== false ? navigator.serviceWorker : undefined, platformId);\n}\n/**\n * @experimental\n */\nvar ServiceWorkerModule = /** @class */ (function () {\n    function ServiceWorkerModule() {\n    }\n    /**\n     * Register the given Angular Service Worker script.\n     *\n     * If `enabled` is set to `false` in the given options, the module will behave as if service\n     * workers are not supported by the browser, and the service worker will not be registered.\n     */\n    /**\n       * Register the given Angular Service Worker script.\n       *\n       * If `enabled` is set to `false` in the given options, the module will behave as if service\n       * workers are not supported by the browser, and the service worker will not be registered.\n       */\n    ServiceWorkerModule.register = /**\n       * Register the given Angular Service Worker script.\n       *\n       * If `enabled` is set to `false` in the given options, the module will behave as if service\n       * workers are not supported by the browser, and the service worker will not be registered.\n       */\n    function (script, opts) {\n        if (opts === void 0) { opts = {}; }\n        return {\n            ngModule: ServiceWorkerModule,\n            providers: [\n                { provide: SCRIPT, useValue: script },\n                { provide: RegistrationOptions, useValue: opts },\n                {\n                    provide: NgswCommChannel,\n                    useFactory: ngswCommChannelFactory,\n                    deps: [RegistrationOptions, core.PLATFORM_ID]\n                },\n                {\n                    provide: core.APP_INITIALIZER,\n                    useFactory: ngswAppInitializer,\n                    deps: [core.Injector, SCRIPT, RegistrationOptions, core.PLATFORM_ID],\n                    multi: true,\n                },\n            ],\n        };\n    };\n    ServiceWorkerModule.decorators = [\n        { type: core.NgModule, args: [{\n                    providers: [SwPush, SwUpdate],\n                },] }\n    ];\n    /** @nocollapse */\n    ServiceWorkerModule.ctorParameters = function () { return []; };\n    return ServiceWorkerModule;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.ɵangular_packages_service_worker_service_worker_e = NgswCommChannel;\nexports.ɵangular_packages_service_worker_service_worker_a = RegistrationOptions;\nexports.ɵangular_packages_service_worker_service_worker_b = SCRIPT;\nexports.ɵangular_packages_service_worker_service_worker_c = ngswAppInitializer;\nexports.ɵangular_packages_service_worker_service_worker_d = ngswCommChannelFactory;\nexports.ServiceWorkerModule = ServiceWorkerModule;\nexports.SwPush = SwPush;\nexports.SwUpdate = SwUpdate;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=service-worker.umd.js.map\n"]}